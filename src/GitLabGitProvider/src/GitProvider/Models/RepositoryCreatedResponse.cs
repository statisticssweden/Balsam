/*
 * GitProvider
 *
 * This a service contract for the GitProvider in Balsam.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using GitProvider.Converters;

namespace GitProvider.Models
{ 
    /// <summary>
    /// Repository description
    /// </summary>
    [DataContract]
    public class RepositoryCreatedResponse : IEquatable<RepositoryCreatedResponse>
    {
        /// <summary>
        /// The identity of the repository
        /// </summary>
        /// <value>The identity of the repository</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The preferred name for the repository
        /// </summary>
        /// <value>The preferred name for the repository</value>
        [Required]
        [DataMember(Name="preferredName", EmitDefaultValue=false)]
        public string PreferredName { get; set; }

        /// <summary>
        /// The name of the repository
        /// </summary>
        /// <value>The name of the repository</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The path to the repository that can be used for clone it.
        /// </summary>
        /// <value>The path to the repository that can be used for clone it.</value>
        [Required]
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// The name of the default git branch
        /// </summary>
        /// <value>The name of the default git branch</value>
        [Required]
        [DataMember(Name="defaultBranchName", EmitDefaultValue=false)]
        public string DefaultBranchName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RepositoryCreatedResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PreferredName: ").Append(PreferredName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  DefaultBranchName: ").Append(DefaultBranchName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RepositoryCreatedResponse)obj);
        }

        /// <summary>
        /// Returns true if RepositoryCreatedResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of RepositoryCreatedResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepositoryCreatedResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PreferredName == other.PreferredName ||
                    PreferredName != null &&
                    PreferredName.Equals(other.PreferredName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    DefaultBranchName == other.DefaultBranchName ||
                    DefaultBranchName != null &&
                    DefaultBranchName.Equals(other.DefaultBranchName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (PreferredName != null)
                    hashCode = hashCode * 59 + PreferredName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (DefaultBranchName != null)
                    hashCode = hashCode * 59 + DefaultBranchName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RepositoryCreatedResponse left, RepositoryCreatedResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RepositoryCreatedResponse left, RepositoryCreatedResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
