/* tslint:disable */
/* eslint-disable */
/**
 * BalsamApi
 * This is the API for createing Baslam artifcats.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { BranchCreatedResponse } from '../../BalsamAPI/Model';
// @ts-ignore
import { CreateBranchRequest } from '../../BalsamAPI/Model';
// @ts-ignore
import { CreateProjectRequest } from '../../BalsamAPI/Model';
// @ts-ignore
import { Problem } from '../../BalsamAPI/Model';
// @ts-ignore
import { ProjectCreatedResponse } from '../../BalsamAPI/Model';
// @ts-ignore
import { ProjectListResponse } from '../../BalsamAPI/Model';
// @ts-ignore
import { ProjectResponse } from '../../BalsamAPI/Model';
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new branch for a project
         * @param {string} projectId the identity of the project.
         * @param {CreateBranchRequest} [createBranchRequest] Definition of a new branch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranch: async (projectId: string, createBranchRequest?: CreateBranchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('createBranch', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/branches`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new project
         * @param {CreateProjectRequest} [createProjectRequest] Definition of a new project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (createProjectRequest?: CreateProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get files for a branch for a project
         * @param {string} projectId the identity of the project.
         * @param {string} branchId The identity of the branch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles: async (projectId: string, branchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getFiles', 'projectId', projectId)
            // verify required parameter 'branchId' is not null or undefined
            assertParamExists('getFiles', 'branchId', branchId)
            const localVarPath = `/projects/{projectId}/branches/{branchId}/files`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"branchId"}}`, encodeURIComponent(String(branchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets project information
         * @param {string} projectId the identity of the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProject', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all available projects
         * @param {boolean} [all] If all projects should be returened or only projects that the user has assess rights too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: async (all?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new branch for a project
         * @param {string} projectId the identity of the project.
         * @param {CreateBranchRequest} [createBranchRequest] Definition of a new branch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBranch(projectId: string, createBranchRequest?: CreateBranchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBranch(projectId, createBranchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new project
         * @param {CreateProjectRequest} [createProjectRequest] Definition of a new project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(createProjectRequest?: CreateProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(createProjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get files for a branch for a project
         * @param {string} projectId the identity of the project.
         * @param {string} branchId The identity of the branch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiles(projectId: string, branchId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFiles(projectId, branchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets project information
         * @param {string} projectId the identity of the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of all available projects
         * @param {boolean} [all] If all projects should be returened or only projects that the user has assess rights too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjects(all?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(all, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Create a new branch for a project
         * @param {string} projectId the identity of the project.
         * @param {CreateBranchRequest} [createBranchRequest] Definition of a new branch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranch(projectId: string, createBranchRequest?: CreateBranchRequest, options?: any): AxiosPromise<BranchCreatedResponse> {
            return localVarFp.createBranch(projectId, createBranchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new project
         * @param {CreateProjectRequest} [createProjectRequest] Definition of a new project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectRequest?: CreateProjectRequest, options?: any): AxiosPromise<ProjectCreatedResponse> {
            return localVarFp.createProject(createProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get files for a branch for a project
         * @param {string} projectId the identity of the project.
         * @param {string} branchId The identity of the branch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles(projectId: string, branchId: string, options?: any): AxiosPromise<Array<any>> {
            return localVarFp.getFiles(projectId, branchId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets project information
         * @param {string} projectId the identity of the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(projectId: string, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.getProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all available projects
         * @param {boolean} [all] If all projects should be returened or only projects that the user has assess rights too
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(all?: boolean, options?: any): AxiosPromise<ProjectListResponse> {
            return localVarFp.listProjects(all, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * Create a new branch for a project
     * @param {string} projectId the identity of the project.
     * @param {CreateBranchRequest} [createBranchRequest] Definition of a new branch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createBranch(projectId: string, createBranchRequest?: CreateBranchRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createBranch(projectId, createBranchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new project
     * @param {CreateProjectRequest} [createProjectRequest] Definition of a new project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProject(createProjectRequest?: CreateProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createProject(createProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get files for a branch for a project
     * @param {string} projectId the identity of the project.
     * @param {string} branchId The identity of the branch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getFiles(projectId: string, branchId: string, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getFiles(projectId, branchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets project information
     * @param {string} projectId the identity of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProject(projectId: string, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of all available projects
     * @param {boolean} [all] If all projects should be returened or only projects that the user has assess rights too
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public listProjects(all?: boolean, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).listProjects(all, options).then((request) => request(this.axios, this.basePath));
    }
}

