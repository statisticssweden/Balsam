/*
 * BalsamApi
 *
 * This is the API for createing Baslam artifcats.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using BalsamApi.Server.Attributes;
using BalsamApi.Server.Models;

namespace BalsamApi.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class WorkspaceApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a new workspace</remarks>
        /// <param name="createWorkspaceRequest">Definition of a new workspace</param>
        /// <response code="200">Success</response>
        /// <response code="400">Error respsone for 400</response>
        [HttpPost]
        [Route("/api/v1/workspaces")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateWorkspace")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkspaceCreatedResponse), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Problem), description: "Error respsone for 400")]
        public abstract Task<IActionResult> CreateWorkspace([FromBody]CreateWorkspaceRequest? createWorkspaceRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete workspace</remarks>
        /// <param name="projectId">id for the project</param>
        /// <param name="branchId">id for the branch</param>
        /// <param name="workspaceId">id id for the workspace</param>
        /// <response code="200">Success</response>
        /// <response code="400">Error respsone for 400</response>
        [HttpDelete]
        [Route("/api/v1/workspaces/{workspaceId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteWorkspace")]
        [SwaggerResponse(statusCode: 400, type: typeof(Problem), description: "Error respsone for 400")]
        public abstract Task<IActionResult> DeleteWorkspace([FromQuery (Name = "projectId")][Required()]string projectId, [FromQuery (Name = "branchId")][Required()]string branchId, [FromRoute (Name = "workspaceId")][Required]string workspaceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get workspaces</remarks>
        /// <param name="projectId">id for the project</param>
        /// <param name="branchId">id for the branch</param>
        /// <param name="all">If all workspaces should be returened or only workspaces that the user has assess rights too</param>
        /// <response code="200">Success</response>
        /// <response code="400">Error respsone for 400</response>
        [HttpGet]
        [Route("/api/v1/workspaces")]
        [ValidateModelState]
        [SwaggerOperation("GetWorkspace")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Workspace>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Problem), description: "Error respsone for 400")]
        public abstract Task<IActionResult> GetWorkspace([FromQuery (Name = "projectId")]string? projectId, [FromQuery (Name = "branchId")]string? branchId, [FromQuery (Name = "all")]bool? all);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>List available workspace templates</remarks>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/v1/templates")]
        [ValidateModelState]
        [SwaggerOperation("ListTemplates")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Template>), description: "Success")]
        public abstract Task<IActionResult> ListTemplates();
    }
}
