/*
 * GitProvider
 *
 * This a service contract for the GitProvider in Balsam.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GitProviderApiClient.Client;
using GitProviderApiClient.Model;

namespace GitProviderApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRepositoryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a branch from main branch in a existing repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The name of the repository where the branch should be created.</param>
        /// <param name="createBranchRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BranchCreatedResponse</returns>
        BranchCreatedResponse CreateBranch(string repositoryId, CreateBranchRequest? createBranchRequest = default(CreateBranchRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a branch from main branch in a existing repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The name of the repository where the branch should be created.</param>
        /// <param name="createBranchRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BranchCreatedResponse</returns>
        ApiResponse<BranchCreatedResponse> CreateBranchWithHttpInfo(string repositoryId, CreateBranchRequest? createBranchRequest = default(CreateBranchRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRepositoryRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepositoryCreatedResponse</returns>
        RepositoryCreatedResponse CreateRepository(CreateRepositoryRequest? createRepositoryRequest = default(CreateRepositoryRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRepositoryRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepositoryCreatedResponse</returns>
        ApiResponse<RepositoryCreatedResponse> CreateRepositoryWithHttpInfo(CreateRepositoryRequest? createRepositoryRequest = default(CreateRepositoryRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get file contents
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The identity of the branch.</param>
        /// <param name="fileId">The identity of the file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetFile(string repositoryId, string branchId, string fileId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get file contents
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The identity of the branch.</param>
        /// <param name="fileId">The identity of the file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetFileWithHttpInfo(string repositoryId, string branchId, string fileId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets file descriptions of all files in a git branch for specified repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The id of the branch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;File&gt;</returns>
        List<File> GetFilesInBranch(string repositoryId, string branchId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets file descriptions of all files in a git branch for specified repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The id of the branch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;File&gt;</returns>
        ApiResponse<List<File>> GetFilesInBranchWithHttpInfo(string repositoryId, string branchId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRepositoryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a branch from main branch in a existing repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The name of the repository where the branch should be created.</param>
        /// <param name="createBranchRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BranchCreatedResponse</returns>
        System.Threading.Tasks.Task<BranchCreatedResponse> CreateBranchAsync(string repositoryId, CreateBranchRequest? createBranchRequest = default(CreateBranchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a branch from main branch in a existing repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The name of the repository where the branch should be created.</param>
        /// <param name="createBranchRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BranchCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BranchCreatedResponse>> CreateBranchWithHttpInfoAsync(string repositoryId, CreateBranchRequest? createBranchRequest = default(CreateBranchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRepositoryRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepositoryCreatedResponse</returns>
        System.Threading.Tasks.Task<RepositoryCreatedResponse> CreateRepositoryAsync(CreateRepositoryRequest? createRepositoryRequest = default(CreateRepositoryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRepositoryRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepositoryCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositoryCreatedResponse>> CreateRepositoryWithHttpInfoAsync(CreateRepositoryRequest? createRepositoryRequest = default(CreateRepositoryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get file contents
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The identity of the branch.</param>
        /// <param name="fileId">The identity of the file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetFileAsync(string repositoryId, string branchId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get file contents
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The identity of the branch.</param>
        /// <param name="fileId">The identity of the file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetFileWithHttpInfoAsync(string repositoryId, string branchId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets file descriptions of all files in a git branch for specified repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The id of the branch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;File&gt;</returns>
        System.Threading.Tasks.Task<List<File>> GetFilesInBranchAsync(string repositoryId, string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets file descriptions of all files in a git branch for specified repository
        /// </remarks>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The id of the branch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;File&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<File>>> GetFilesInBranchWithHttpInfoAsync(string repositoryId, string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRepositoryApi : IRepositoryApiSync, IRepositoryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RepositoryApi : IRepositoryApi
    {
        private GitProviderApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RepositoryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RepositoryApi(string basePath)
        {
            this.Configuration = GitProviderApiClient.Client.Configuration.MergeConfigurations(
                GitProviderApiClient.Client.GlobalConfiguration.Instance,
                new GitProviderApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GitProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GitProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GitProviderApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RepositoryApi(GitProviderApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GitProviderApiClient.Client.Configuration.MergeConfigurations(
                GitProviderApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GitProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GitProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GitProviderApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RepositoryApi(GitProviderApiClient.Client.ISynchronousClient client, GitProviderApiClient.Client.IAsynchronousClient asyncClient, GitProviderApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GitProviderApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GitProviderApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GitProviderApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GitProviderApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GitProviderApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a branch from main branch in a existing repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The name of the repository where the branch should be created.</param>
        /// <param name="createBranchRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BranchCreatedResponse</returns>
        public BranchCreatedResponse CreateBranch(string repositoryId, CreateBranchRequest? createBranchRequest = default(CreateBranchRequest?), int operationIndex = 0)
        {
            GitProviderApiClient.Client.ApiResponse<BranchCreatedResponse> localVarResponse = CreateBranchWithHttpInfo(repositoryId, createBranchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a branch from main branch in a existing repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The name of the repository where the branch should be created.</param>
        /// <param name="createBranchRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BranchCreatedResponse</returns>
        public GitProviderApiClient.Client.ApiResponse<BranchCreatedResponse> CreateBranchWithHttpInfo(string repositoryId, CreateBranchRequest? createBranchRequest = default(CreateBranchRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'repositoryId' is set
            if (repositoryId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'repositoryId' when calling RepositoryApi->CreateBranch");
            }

            GitProviderApiClient.Client.RequestOptions localVarRequestOptions = new GitProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = GitProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GitProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("repositoryId", GitProviderApiClient.Client.ClientUtils.ParameterToString(repositoryId)); // path parameter
            localVarRequestOptions.Data = createBranchRequest;

            localVarRequestOptions.Operation = "RepositoryApi.CreateBranch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BranchCreatedResponse>("/repos/{repositoryId}/branches", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBranch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a branch from main branch in a existing repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The name of the repository where the branch should be created.</param>
        /// <param name="createBranchRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BranchCreatedResponse</returns>
        public async System.Threading.Tasks.Task<BranchCreatedResponse> CreateBranchAsync(string repositoryId, CreateBranchRequest? createBranchRequest = default(CreateBranchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GitProviderApiClient.Client.ApiResponse<BranchCreatedResponse> localVarResponse = await CreateBranchWithHttpInfoAsync(repositoryId, createBranchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a branch from main branch in a existing repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The name of the repository where the branch should be created.</param>
        /// <param name="createBranchRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BranchCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<GitProviderApiClient.Client.ApiResponse<BranchCreatedResponse>> CreateBranchWithHttpInfoAsync(string repositoryId, CreateBranchRequest? createBranchRequest = default(CreateBranchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'repositoryId' is set
            if (repositoryId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'repositoryId' when calling RepositoryApi->CreateBranch");
            }


            GitProviderApiClient.Client.RequestOptions localVarRequestOptions = new GitProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = GitProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GitProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("repositoryId", GitProviderApiClient.Client.ClientUtils.ParameterToString(repositoryId)); // path parameter
            localVarRequestOptions.Data = createBranchRequest;

            localVarRequestOptions.Operation = "RepositoryApi.CreateBranch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BranchCreatedResponse>("/repos/{repositoryId}/branches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBranch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRepositoryRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepositoryCreatedResponse</returns>
        public RepositoryCreatedResponse CreateRepository(CreateRepositoryRequest? createRepositoryRequest = default(CreateRepositoryRequest?), int operationIndex = 0)
        {
            GitProviderApiClient.Client.ApiResponse<RepositoryCreatedResponse> localVarResponse = CreateRepositoryWithHttpInfo(createRepositoryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRepositoryRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepositoryCreatedResponse</returns>
        public GitProviderApiClient.Client.ApiResponse<RepositoryCreatedResponse> CreateRepositoryWithHttpInfo(CreateRepositoryRequest? createRepositoryRequest = default(CreateRepositoryRequest?), int operationIndex = 0)
        {
            GitProviderApiClient.Client.RequestOptions localVarRequestOptions = new GitProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = GitProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GitProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createRepositoryRequest;

            localVarRequestOptions.Operation = "RepositoryApi.CreateRepository";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RepositoryCreatedResponse>("/repos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRepository", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRepositoryRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepositoryCreatedResponse</returns>
        public async System.Threading.Tasks.Task<RepositoryCreatedResponse> CreateRepositoryAsync(CreateRepositoryRequest? createRepositoryRequest = default(CreateRepositoryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GitProviderApiClient.Client.ApiResponse<RepositoryCreatedResponse> localVarResponse = await CreateRepositoryWithHttpInfoAsync(createRepositoryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRepositoryRequest">Definition of a new repository (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepositoryCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<GitProviderApiClient.Client.ApiResponse<RepositoryCreatedResponse>> CreateRepositoryWithHttpInfoAsync(CreateRepositoryRequest? createRepositoryRequest = default(CreateRepositoryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GitProviderApiClient.Client.RequestOptions localVarRequestOptions = new GitProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = GitProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GitProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createRepositoryRequest;

            localVarRequestOptions.Operation = "RepositoryApi.CreateRepository";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RepositoryCreatedResponse>("/repos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRepository", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get file contents
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The identity of the branch.</param>
        /// <param name="fileId">The identity of the file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetFile(string repositoryId, string branchId, string fileId, int operationIndex = 0)
        {
            GitProviderApiClient.Client.ApiResponse<string> localVarResponse = GetFileWithHttpInfo(repositoryId, branchId, fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get file contents
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The identity of the branch.</param>
        /// <param name="fileId">The identity of the file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public GitProviderApiClient.Client.ApiResponse<string> GetFileWithHttpInfo(string repositoryId, string branchId, string fileId, int operationIndex = 0)
        {
            // verify the required parameter 'repositoryId' is set
            if (repositoryId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'repositoryId' when calling RepositoryApi->GetFile");
            }

            // verify the required parameter 'branchId' is set
            if (branchId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'branchId' when calling RepositoryApi->GetFile");
            }

            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'fileId' when calling RepositoryApi->GetFile");
            }

            GitProviderApiClient.Client.RequestOptions localVarRequestOptions = new GitProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*",
                "application/problem+json"
            };

            var localVarContentType = GitProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GitProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("repositoryId", GitProviderApiClient.Client.ClientUtils.ParameterToString(repositoryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("branchId", GitProviderApiClient.Client.ClientUtils.ParameterToString(branchId)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileId", GitProviderApiClient.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "RepositoryApi.GetFile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/repos/{repositoryId}/branches/{branchId}/files/{fileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get file contents
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The identity of the branch.</param>
        /// <param name="fileId">The identity of the file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetFileAsync(string repositoryId, string branchId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GitProviderApiClient.Client.ApiResponse<string> localVarResponse = await GetFileWithHttpInfoAsync(repositoryId, branchId, fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get file contents
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The identity of the branch.</param>
        /// <param name="fileId">The identity of the file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<GitProviderApiClient.Client.ApiResponse<string>> GetFileWithHttpInfoAsync(string repositoryId, string branchId, string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'repositoryId' is set
            if (repositoryId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'repositoryId' when calling RepositoryApi->GetFile");
            }

            // verify the required parameter 'branchId' is set
            if (branchId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'branchId' when calling RepositoryApi->GetFile");
            }

            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'fileId' when calling RepositoryApi->GetFile");
            }


            GitProviderApiClient.Client.RequestOptions localVarRequestOptions = new GitProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*",
                "application/problem+json"
            };

            var localVarContentType = GitProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GitProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("repositoryId", GitProviderApiClient.Client.ClientUtils.ParameterToString(repositoryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("branchId", GitProviderApiClient.Client.ClientUtils.ParameterToString(branchId)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileId", GitProviderApiClient.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "RepositoryApi.GetFile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/repos/{repositoryId}/branches/{branchId}/files/{fileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets file descriptions of all files in a git branch for specified repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The id of the branch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;File&gt;</returns>
        public List<File> GetFilesInBranch(string repositoryId, string branchId, int operationIndex = 0)
        {
            GitProviderApiClient.Client.ApiResponse<List<File>> localVarResponse = GetFilesInBranchWithHttpInfo(repositoryId, branchId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets file descriptions of all files in a git branch for specified repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The id of the branch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;File&gt;</returns>
        public GitProviderApiClient.Client.ApiResponse<List<File>> GetFilesInBranchWithHttpInfo(string repositoryId, string branchId, int operationIndex = 0)
        {
            // verify the required parameter 'repositoryId' is set
            if (repositoryId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'repositoryId' when calling RepositoryApi->GetFilesInBranch");
            }

            // verify the required parameter 'branchId' is set
            if (branchId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'branchId' when calling RepositoryApi->GetFilesInBranch");
            }

            GitProviderApiClient.Client.RequestOptions localVarRequestOptions = new GitProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = GitProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GitProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("repositoryId", GitProviderApiClient.Client.ClientUtils.ParameterToString(repositoryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("branchId", GitProviderApiClient.Client.ClientUtils.ParameterToString(branchId)); // path parameter

            localVarRequestOptions.Operation = "RepositoryApi.GetFilesInBranch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<File>>("/repos/{repositoryId}/branches/{branchId}/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilesInBranch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets file descriptions of all files in a git branch for specified repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The id of the branch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;File&gt;</returns>
        public async System.Threading.Tasks.Task<List<File>> GetFilesInBranchAsync(string repositoryId, string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GitProviderApiClient.Client.ApiResponse<List<File>> localVarResponse = await GetFilesInBranchWithHttpInfoAsync(repositoryId, branchId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets file descriptions of all files in a git branch for specified repository
        /// </summary>
        /// <exception cref="GitProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryId">The id of the repository.</param>
        /// <param name="branchId">The id of the branch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;File&gt;)</returns>
        public async System.Threading.Tasks.Task<GitProviderApiClient.Client.ApiResponse<List<File>>> GetFilesInBranchWithHttpInfoAsync(string repositoryId, string branchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'repositoryId' is set
            if (repositoryId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'repositoryId' when calling RepositoryApi->GetFilesInBranch");
            }

            // verify the required parameter 'branchId' is set
            if (branchId == null)
            {
                throw new GitProviderApiClient.Client.ApiException(400, "Missing required parameter 'branchId' when calling RepositoryApi->GetFilesInBranch");
            }


            GitProviderApiClient.Client.RequestOptions localVarRequestOptions = new GitProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = GitProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GitProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("repositoryId", GitProviderApiClient.Client.ClientUtils.ParameterToString(repositoryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("branchId", GitProviderApiClient.Client.ClientUtils.ParameterToString(branchId)); // path parameter

            localVarRequestOptions.Operation = "RepositoryApi.GetFilesInBranch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<File>>("/repos/{repositoryId}/branches/{branchId}/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilesInBranch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
