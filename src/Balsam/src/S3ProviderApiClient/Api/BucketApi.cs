/*
 * S3Provider
 *
 * This a service contract for the OicdProvider in Balsam.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using S3ProviderApiClient.Client;
using S3ProviderApiClient.Model;

namespace S3ProviderApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBucketApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new acces key for the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessKeyCreatedResponse</returns>
        AccessKeyCreatedResponse CreateAccessKey(string bucketId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new acces key for the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessKeyCreatedResponse</returns>
        ApiResponse<AccessKeyCreatedResponse> CreateAccessKeyWithHttpInfo(string bucketId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Bucket
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBucketRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BucketCreatedResponse</returns>
        BucketCreatedResponse CreateBucket(CreateBucketRequest? createBucketRequest = default(CreateBucketRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Bucket
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBucketRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BucketCreatedResponse</returns>
        ApiResponse<BucketCreatedResponse> CreateBucketWithHttpInfo(CreateBucketRequest? createBucketRequest = default(CreateBucketRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new virtual folder in the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="createFolderRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderCreatedResponse</returns>
        FolderCreatedResponse CreateFolder(string bucketId, CreateFolderRequest? createFolderRequest = default(CreateFolderRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new virtual folder in the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="createFolderRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderCreatedResponse</returns>
        ApiResponse<FolderCreatedResponse> CreateFolderWithHttpInfo(string bucketId, CreateFolderRequest? createFolderRequest = default(CreateFolderRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a new Bucket
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteBucket(string bucketId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a new Bucket
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBucketWithHttpInfo(string bucketId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a new virtual folder in the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="folderName">the name of the folder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteFolder(string bucketId, string folderName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a new virtual folder in the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="folderName">the name of the folder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFolderWithHttpInfo(string bucketId, string folderName, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBucketApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new acces key for the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessKeyCreatedResponse</returns>
        System.Threading.Tasks.Task<AccessKeyCreatedResponse> CreateAccessKeyAsync(string bucketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new acces key for the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessKeyCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessKeyCreatedResponse>> CreateAccessKeyWithHttpInfoAsync(string bucketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Bucket
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBucketRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BucketCreatedResponse</returns>
        System.Threading.Tasks.Task<BucketCreatedResponse> CreateBucketAsync(CreateBucketRequest? createBucketRequest = default(CreateBucketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Bucket
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBucketRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BucketCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BucketCreatedResponse>> CreateBucketWithHttpInfoAsync(CreateBucketRequest? createBucketRequest = default(CreateBucketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new virtual folder in the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="createFolderRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderCreatedResponse</returns>
        System.Threading.Tasks.Task<FolderCreatedResponse> CreateFolderAsync(string bucketId, CreateFolderRequest? createFolderRequest = default(CreateFolderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new virtual folder in the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="createFolderRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderCreatedResponse>> CreateFolderWithHttpInfoAsync(string bucketId, CreateFolderRequest? createFolderRequest = default(CreateFolderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a new Bucket
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBucketAsync(string bucketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a new Bucket
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBucketWithHttpInfoAsync(string bucketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a new virtual folder in the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="folderName">the name of the folder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFolderAsync(string bucketId, string folderName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a new virtual folder in the bucket.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="folderName">the name of the folder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFolderWithHttpInfoAsync(string bucketId, string folderName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBucketApi : IBucketApiSync, IBucketApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BucketApi : IBucketApi
    {
        private S3ProviderApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BucketApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BucketApi(string basePath)
        {
            this.Configuration = S3ProviderApiClient.Client.Configuration.MergeConfigurations(
                S3ProviderApiClient.Client.GlobalConfiguration.Instance,
                new S3ProviderApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new S3ProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new S3ProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = S3ProviderApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BucketApi(S3ProviderApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = S3ProviderApiClient.Client.Configuration.MergeConfigurations(
                S3ProviderApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new S3ProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new S3ProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = S3ProviderApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BucketApi(S3ProviderApiClient.Client.ISynchronousClient client, S3ProviderApiClient.Client.IAsynchronousClient asyncClient, S3ProviderApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = S3ProviderApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public S3ProviderApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public S3ProviderApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public S3ProviderApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public S3ProviderApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a new acces key for the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessKeyCreatedResponse</returns>
        public AccessKeyCreatedResponse CreateAccessKey(string bucketId, int operationIndex = 0)
        {
            S3ProviderApiClient.Client.ApiResponse<AccessKeyCreatedResponse> localVarResponse = CreateAccessKeyWithHttpInfo(bucketId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new acces key for the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessKeyCreatedResponse</returns>
        public S3ProviderApiClient.Client.ApiResponse<AccessKeyCreatedResponse> CreateAccessKeyWithHttpInfo(string bucketId, int operationIndex = 0)
        {
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'bucketId' when calling BucketApi->CreateAccessKey");
            }

            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucketId", S3ProviderApiClient.Client.ClientUtils.ParameterToString(bucketId)); // path parameter

            localVarRequestOptions.Operation = "BucketApi.CreateAccessKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AccessKeyCreatedResponse>("/buckets/{bucketId}/acceskey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccessKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new acces key for the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessKeyCreatedResponse</returns>
        public async System.Threading.Tasks.Task<AccessKeyCreatedResponse> CreateAccessKeyAsync(string bucketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            S3ProviderApiClient.Client.ApiResponse<AccessKeyCreatedResponse> localVarResponse = await CreateAccessKeyWithHttpInfoAsync(bucketId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new acces key for the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessKeyCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<S3ProviderApiClient.Client.ApiResponse<AccessKeyCreatedResponse>> CreateAccessKeyWithHttpInfoAsync(string bucketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'bucketId' when calling BucketApi->CreateAccessKey");
            }


            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucketId", S3ProviderApiClient.Client.ClientUtils.ParameterToString(bucketId)); // path parameter

            localVarRequestOptions.Operation = "BucketApi.CreateAccessKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccessKeyCreatedResponse>("/buckets/{bucketId}/acceskey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccessKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new Bucket
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBucketRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BucketCreatedResponse</returns>
        public BucketCreatedResponse CreateBucket(CreateBucketRequest? createBucketRequest = default(CreateBucketRequest?), int operationIndex = 0)
        {
            S3ProviderApiClient.Client.ApiResponse<BucketCreatedResponse> localVarResponse = CreateBucketWithHttpInfo(createBucketRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new Bucket
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBucketRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BucketCreatedResponse</returns>
        public S3ProviderApiClient.Client.ApiResponse<BucketCreatedResponse> CreateBucketWithHttpInfo(CreateBucketRequest? createBucketRequest = default(CreateBucketRequest?), int operationIndex = 0)
        {
            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBucketRequest;

            localVarRequestOptions.Operation = "BucketApi.CreateBucket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BucketCreatedResponse>("/buckets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBucket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new Bucket
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBucketRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BucketCreatedResponse</returns>
        public async System.Threading.Tasks.Task<BucketCreatedResponse> CreateBucketAsync(CreateBucketRequest? createBucketRequest = default(CreateBucketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            S3ProviderApiClient.Client.ApiResponse<BucketCreatedResponse> localVarResponse = await CreateBucketWithHttpInfoAsync(createBucketRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new Bucket
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBucketRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BucketCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<S3ProviderApiClient.Client.ApiResponse<BucketCreatedResponse>> CreateBucketWithHttpInfoAsync(CreateBucketRequest? createBucketRequest = default(CreateBucketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBucketRequest;

            localVarRequestOptions.Operation = "BucketApi.CreateBucket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BucketCreatedResponse>("/buckets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBucket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new virtual folder in the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="createFolderRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderCreatedResponse</returns>
        public FolderCreatedResponse CreateFolder(string bucketId, CreateFolderRequest? createFolderRequest = default(CreateFolderRequest?), int operationIndex = 0)
        {
            S3ProviderApiClient.Client.ApiResponse<FolderCreatedResponse> localVarResponse = CreateFolderWithHttpInfo(bucketId, createFolderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new virtual folder in the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="createFolderRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderCreatedResponse</returns>
        public S3ProviderApiClient.Client.ApiResponse<FolderCreatedResponse> CreateFolderWithHttpInfo(string bucketId, CreateFolderRequest? createFolderRequest = default(CreateFolderRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'bucketId' when calling BucketApi->CreateFolder");
            }

            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucketId", S3ProviderApiClient.Client.ClientUtils.ParameterToString(bucketId)); // path parameter
            localVarRequestOptions.Data = createFolderRequest;

            localVarRequestOptions.Operation = "BucketApi.CreateFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FolderCreatedResponse>("/buckets/{bucketId}/folder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new virtual folder in the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="createFolderRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderCreatedResponse</returns>
        public async System.Threading.Tasks.Task<FolderCreatedResponse> CreateFolderAsync(string bucketId, CreateFolderRequest? createFolderRequest = default(CreateFolderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            S3ProviderApiClient.Client.ApiResponse<FolderCreatedResponse> localVarResponse = await CreateFolderWithHttpInfoAsync(bucketId, createFolderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new virtual folder in the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="createFolderRequest">Definition of a new role (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<S3ProviderApiClient.Client.ApiResponse<FolderCreatedResponse>> CreateFolderWithHttpInfoAsync(string bucketId, CreateFolderRequest? createFolderRequest = default(CreateFolderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'bucketId' when calling BucketApi->CreateFolder");
            }


            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucketId", S3ProviderApiClient.Client.ClientUtils.ParameterToString(bucketId)); // path parameter
            localVarRequestOptions.Data = createFolderRequest;

            localVarRequestOptions.Operation = "BucketApi.CreateFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FolderCreatedResponse>("/buckets/{bucketId}/folder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a new Bucket
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteBucket(string bucketId, int operationIndex = 0)
        {
            DeleteBucketWithHttpInfo(bucketId);
        }

        /// <summary>
        ///  Deletes a new Bucket
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public S3ProviderApiClient.Client.ApiResponse<Object> DeleteBucketWithHttpInfo(string bucketId, int operationIndex = 0)
        {
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'bucketId' when calling BucketApi->DeleteBucket");
            }

            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucketId", S3ProviderApiClient.Client.ClientUtils.ParameterToString(bucketId)); // path parameter

            localVarRequestOptions.Operation = "BucketApi.DeleteBucket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/buckets/{bucketId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBucket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a new Bucket
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBucketAsync(string bucketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBucketWithHttpInfoAsync(bucketId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes a new Bucket
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<S3ProviderApiClient.Client.ApiResponse<Object>> DeleteBucketWithHttpInfoAsync(string bucketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'bucketId' when calling BucketApi->DeleteBucket");
            }


            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucketId", S3ProviderApiClient.Client.ClientUtils.ParameterToString(bucketId)); // path parameter

            localVarRequestOptions.Operation = "BucketApi.DeleteBucket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/buckets/{bucketId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBucket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a new virtual folder in the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="folderName">the name of the folder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteFolder(string bucketId, string folderName, int operationIndex = 0)
        {
            DeleteFolderWithHttpInfo(bucketId, folderName);
        }

        /// <summary>
        ///  Deletes a new virtual folder in the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="folderName">the name of the folder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public S3ProviderApiClient.Client.ApiResponse<Object> DeleteFolderWithHttpInfo(string bucketId, string folderName, int operationIndex = 0)
        {
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'bucketId' when calling BucketApi->DeleteFolder");
            }

            // verify the required parameter 'folderName' is set
            if (folderName == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'folderName' when calling BucketApi->DeleteFolder");
            }

            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucketId", S3ProviderApiClient.Client.ClientUtils.ParameterToString(bucketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderName", S3ProviderApiClient.Client.ClientUtils.ParameterToString(folderName)); // path parameter

            localVarRequestOptions.Operation = "BucketApi.DeleteFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/buckets/{bucketId}/folder/{folderName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a new virtual folder in the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="folderName">the name of the folder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFolderAsync(string bucketId, string folderName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFolderWithHttpInfoAsync(bucketId, folderName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes a new virtual folder in the bucket.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketId">the name of the bucket</param>
        /// <param name="folderName">the name of the folder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<S3ProviderApiClient.Client.ApiResponse<Object>> DeleteFolderWithHttpInfoAsync(string bucketId, string folderName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'bucketId' when calling BucketApi->DeleteFolder");
            }

            // verify the required parameter 'folderName' is set
            if (folderName == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'folderName' when calling BucketApi->DeleteFolder");
            }


            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucketId", S3ProviderApiClient.Client.ClientUtils.ParameterToString(bucketId)); // path parameter
            localVarRequestOptions.PathParameters.Add("folderName", S3ProviderApiClient.Client.ClientUtils.ParameterToString(folderName)); // path parameter

            localVarRequestOptions.Operation = "BucketApi.DeleteFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/buckets/{bucketId}/folder/{folderName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
