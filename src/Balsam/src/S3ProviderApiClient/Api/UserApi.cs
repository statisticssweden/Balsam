/*
 * GitProvider
 *
 * This a service contract for the GitProvider in Balsam.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using S3ProviderApiClient.Client;
using S3ProviderApiClient.Model;

namespace S3ProviderApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a personal access token for the user.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserPATCreatedResponse</returns>
        UserPATCreatedResponse CreatePAT(string id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a personal access token for the user.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserPATCreatedResponse</returns>
        ApiResponse<UserPATCreatedResponse> CreatePATWithHttpInfo(string id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a personal access token for the user.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPATCreatedResponse</returns>
        System.Threading.Tasks.Task<UserPATCreatedResponse> CreatePATAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a personal access token for the user.
        /// </remarks>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPATCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPATCreatedResponse>> CreatePATWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private S3ProviderApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(string basePath)
        {
            this.Configuration = S3ProviderApiClient.Client.Configuration.MergeConfigurations(
                S3ProviderApiClient.Client.GlobalConfiguration.Instance,
                new S3ProviderApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new S3ProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new S3ProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = S3ProviderApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(S3ProviderApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = S3ProviderApiClient.Client.Configuration.MergeConfigurations(
                S3ProviderApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new S3ProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new S3ProviderApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = S3ProviderApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserApi(S3ProviderApiClient.Client.ISynchronousClient client, S3ProviderApiClient.Client.IAsynchronousClient asyncClient, S3ProviderApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = S3ProviderApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public S3ProviderApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public S3ProviderApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public S3ProviderApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public S3ProviderApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a personal access token for the user.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserPATCreatedResponse</returns>
        public UserPATCreatedResponse CreatePAT(string id, int operationIndex = 0)
        {
            S3ProviderApiClient.Client.ApiResponse<UserPATCreatedResponse> localVarResponse = CreatePATWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a personal access token for the user.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserPATCreatedResponse</returns>
        public S3ProviderApiClient.Client.ApiResponse<UserPATCreatedResponse> CreatePATWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->CreatePAT");
            }

            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", S3ProviderApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.CreatePAT";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UserPATCreatedResponse>("/users/{id}/PAT", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePAT", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a personal access token for the user.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPATCreatedResponse</returns>
        public async System.Threading.Tasks.Task<UserPATCreatedResponse> CreatePATAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            S3ProviderApiClient.Client.ApiResponse<UserPATCreatedResponse> localVarResponse = await CreatePATWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a personal access token for the user.
        /// </summary>
        /// <exception cref="S3ProviderApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The user identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPATCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<S3ProviderApiClient.Client.ApiResponse<UserPATCreatedResponse>> CreatePATWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new S3ProviderApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling UserApi->CreatePAT");
            }


            S3ProviderApiClient.Client.RequestOptions localVarRequestOptions = new S3ProviderApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = S3ProviderApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = S3ProviderApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", S3ProviderApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.CreatePAT";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserPATCreatedResponse>("/users/{id}/PAT", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePAT", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
