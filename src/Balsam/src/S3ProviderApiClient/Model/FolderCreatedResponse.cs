/*
 * S3Provider
 *
 * This a service contract for the OicdProvider in Balsam.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = S3ProviderApiClient.Client.OpenAPIDateConverter;

namespace S3ProviderApiClient.Model
{
    /// <summary>
    /// Folder created description
    /// </summary>
    [DataContract(Name = "FolderCreatedResponse")]
    public partial class FolderCreatedResponse : IEquatable<FolderCreatedResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderCreatedResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FolderCreatedResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderCreatedResponse" /> class.
        /// </summary>
        /// <param name="requestedName">The requested name of the virtual folder (required).</param>
        /// <param name="name">The name of the virtual folder (required).</param>
        public FolderCreatedResponse(string requestedName = default(string), string name = default(string))
        {
            // to ensure "requestedName" is required (not null)
            if (requestedName == null)
            {
                throw new ArgumentNullException("requestedName is a required property for FolderCreatedResponse and cannot be null");
            }
            this.RequestedName = requestedName;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FolderCreatedResponse and cannot be null");
            }
            this.Name = name;
        }

        /// <summary>
        /// The requested name of the virtual folder
        /// </summary>
        /// <value>The requested name of the virtual folder</value>
        [DataMember(Name = "requestedName", IsRequired = true, EmitDefaultValue = true)]
        public string RequestedName { get; set; }

        /// <summary>
        /// The name of the virtual folder
        /// </summary>
        /// <value>The name of the virtual folder</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FolderCreatedResponse {\n");
            sb.Append("  RequestedName: ").Append(RequestedName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FolderCreatedResponse);
        }

        /// <summary>
        /// Returns true if FolderCreatedResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FolderCreatedResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FolderCreatedResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestedName == input.RequestedName ||
                    (this.RequestedName != null &&
                    this.RequestedName.Equals(input.RequestedName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestedName != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
