## Rocket Chat image version
## ref: https://hub.docker.com/r/rocketchat/rocket.chat/tags
##
image:
  repository: registry.rocket.chat/rocketchat/rocket.chat
  pullPolicy: IfNotPresent

imagePullSecrets: []

## Host for the application
## set it to a domain pointing to your loadbalancer
host: ##add host for rocketchat

replicaCount: 1
minAvailable: 1

# smtp:
#   enabled: false
#   username:
#   password:
#   host:
#   port: 587

# Extra env vars for Rocket.Chat:
extraEnv:
      - name: ROOT_URL
        value: "http://$host"
      - name: USE_NATIVE_OPLOG
        value: "true"
      - name: OVERWRITE_SETTING_Show_Setup_Wizard
        value: "completed"
      - name: ADMIN_USERNAME
        value: ""##add admin_username
      - name: ADMIN_PASS
        value: ""##add admin_pass
      - name: ADMIN_EMAIL
        value: ""##add admin_email
      - name: Accounts_OAuth_Custom_keycloak
        value: "true"
      - name: Accounts_OAuth_Custom_keycloak_id
        value: ""##add keycloak_id
      - name: Accounts_OAuth_Custom_keycloak_secret
        value: ""##add client_secret
      - name: Accounts_OAuth_Custom_keycloak_url
        value: "http://$keycloak_url"
      - name: Accounts_OAuth_Custom_keycloak_token_path
        value: "/realms/$REALM/protocol/openid-connect/token"
      - name: Accounts_OAuth_Custom_keycloak_identity_path
        value: "/realms/$REALM/protocol/openid-connect/userinfo"
      - name: Accounts_OAuth_Custom_keycloak_authorize_path
        value: "/realms/$REALM/protocol/openid-connect/auth"
      - name: Accounts_OAuth_Custom_keycloak_scope
        value: "openid"
      - name: Accounts_OAuth_Custom_keycloak_access_token_param
        value: "access_token"
      - name: Accounts_OAuth_Custom_keycloak_button_label_text
        value: "Keycloak"
      - name: Accounts_OAuth_Custom_keycloak_button_label_color
        value: "#FFFFFF"
      - name: Accounts_OAuth_Custom_keycloak_login_style
        value: "redirect"
      - name: Accounts_OAuth_Custom_keycloak_button_color
        value: "#13679A"
      - name: Accounts_OAuth_Custom_keycloak_token_sent_via
        value: "payload"
      - name: Accounts_OAuth_Custom_keycloak_identity_token_sent_via
        value: "header"
      - name: Accounts_OAuth_Custom_keycloak_key_field
        value: "username"
      - name: Accounts_OAuth_Custom_keycloak_username_field
        value: "preferred_username"
      - name: Accounts_OAuth_Custom_keycloak_name_field
        value: "name"
      - name: Accounts_OAuth_Custom_keycloak_email_field
        value: "email"
      - name: Accounts_OAuth_Custom_keycloak_channels_admin
        value: "rocket.cat"
      - name: Accounts_OAuth_Custom_keycloak_merge_users
        value: "true"
      - name: Accounts_OAuth_Custom_keycloak_merge_roles
        value: "false"
      - name: Accounts_OAuth_Custom_keycloak_show_button
        value: "true"

mongodb:
  ## Enable or disable MongoDB dependency completely.
  enabled: true

  initdbScriptsConfigMap: rocketchat-mongodb-fix-clustermonitor-role-configmap

  auth:
    # rootPassword:
    usernames:
      - ##add username
    passwords:
      - ##add password
    rootPassword: #add rootPassword
    databases:
      - rocketchat
      
  persistence:
    enabled: true
    ## mongodb data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 8Gi

  volumePermissions: { enabled: true }

securityContext:
  enabled: true
  runAsUser: 999
  fsGroup: 999

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true

  # Annotations to add to the ServiceAccount
  annotations: {}
  # eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/dummyRole

  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

## Configure the ingress object to hook into existing infastructure
### ref : http://kubernetes.io/docs/user-guide/ingress/
###
ingress:
  enabled: false ##add true to create ingress
  pathType: Prefix
  # ingressClassName: "nxinx"
  annotations:
    # kubernetes.io/ingress.class: "contour"
    # projectcontour.io/websocket-routes: /sockjs
  path: /
  tls: {}
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

service:
  annotations: {}
  # service.beta.kubernetes.io/aws-load-balancer-internal: "0.0.0.0/0"

  labels: {}
  # key: value

  ## ServiceType
  ## ref: https://kubernetes.io/docs/user-guide/services/#publishing-services---service-types
  type: LoadBalancer

  ## Optional static port assignment for service type NodePort.
  # nodePort: 30000

  port: 80

  ## Optional when LoadBalancer specified ServiceType.
  loadBalancerIP: ""
